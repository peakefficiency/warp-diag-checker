name: Upload WARP Mac Versions to Cloudflare KV

on:
  schedule:
    - cron: '10 * * * *'
  workflow_dispatch:

jobs:
  fetch-mac-versions:
    runs-on: ubuntu-latest
    outputs:
      release_version: ${{ steps.extract_release_version.outputs.version }}
      beta_version: ${{ steps.extract_beta_version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Fetch WARP Mac Release Version
        id: fetch_release_json
        run: |
          echo "Fetching macOS Release version from Cloudflare API..."
          RESPONSE=$(curl -sSL --max-time 30 "https://downloads.cloudflareclient.com/v1/update/json/macos/ga")
          echo "API response received"
          echo "$RESPONSE" > macos_release.json
          if ! jq empty macos_release.json 2>/dev/null; then
            echo "::error::Failed to parse JSON response from macOS Release API"
            exit 1
          fi
          echo "JSON format validated"

      - name: Validate macOS Release JSON structure
        id: validate_release_json
        run: |
          ITEMS_COUNT=$(jq '.items | length' macos_release.json)
          if [ "$ITEMS_COUNT" -eq 0 ]; then
            echo "::error::No items found in macOS Release JSON response"
            cat macos_release.json
            exit 1
          fi
          
          if ! jq -e '.items[0].version' macos_release.json > /dev/null; then
            echo "::error::Expected field 'items[0].version' not found in macOS Release JSON response"
            cat macos_release.json
            exit 1
          fi
          echo "macOS Release JSON structure is valid"

      - name: Extract macOS Release Version
        id: extract_release_version
        run: |
          RELEASE_VERSION=$(jq -r '.items[0].version' macos_release.json)
          if [[ ! "$RELEASE_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "::error::Invalid version format: $RELEASE_VERSION (expected format: X.X.X.X)"
            exit 1
          fi
          echo "macOS Release version: $RELEASE_VERSION"
          echo "version=$RELEASE_VERSION" >> $GITHUB_OUTPUT

      - name: Fetch WARP macOS Beta Version
        id: fetch_beta_json
        run: |
          echo "Fetching macOS Beta version from Cloudflare API..."
          RESPONSE=$(curl -sSL --max-time 30 "https://downloads.cloudflareclient.com/v1/update/json/macos/beta")
          echo "API response received"
          echo "$RESPONSE" > macos_beta.json
          if ! jq empty macos_beta.json 2>/dev/null; then
            echo "::error::Failed to parse JSON response from macOS Beta API"
            exit 1
          fi
          echo "JSON format validated"

      - name: Validate macOS Beta JSON structure
        id: validate_beta_json
        run: |
          ITEMS_COUNT=$(jq '.items | length' macos_beta.json)
          if [ "$ITEMS_COUNT" -eq 0 ]; then
            echo "::error::No items found in macOS Beta JSON response"
            cat macos_beta.json
            exit 1
          fi
          
          if ! jq -e '.items[0].version' macos_beta.json > /dev/null; then
            echo "::error::Expected field 'items[0].version' not found in macOS Beta JSON response"
            cat macos_beta.json
            exit 1
          fi
          echo "macOS Beta JSON structure is valid"

      - name: Extract macOS Beta Version
        id: extract_beta_version
        run: |
          BETA_VERSION=$(jq -r '.items[0].version' macos_beta.json)
          if [[ ! "$BETA_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "::error::Invalid version format: $BETA_VERSION (expected format: X.X.X.X)"
            exit 1
          fi
          echo "macOS Beta version: $BETA_VERSION"
          echo "version=$BETA_VERSION" >> $GITHUB_OUTPUT

  deploy-release-version:
    needs: fetch-mac-versions
    runs-on: ubuntu-latest
    steps:
      - name: Deploy Release Version to Cloudflare KV with retry
        uses: cloudflare/wrangler-action@v3
        id: deploy-release
        continue-on-error: true
        with:
          apiToken: ${{ secrets.CF_API_KV_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          command: kv:key put --namespace-id=${{ secrets.KV_NAMESPACE_ID }} "mac-release-version" ${{ needs.fetch-mac-versions.outputs.release_version }}

      - name: Retry Release version deployment (1st attempt)
        uses: cloudflare/wrangler-action@v3
        id: retry-release-1
        if: steps.deploy-release.outcome == 'failure'
        continue-on-error: true
        with:
          apiToken: ${{ secrets.CF_API_KV_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          command: kv:key put --namespace-id=${{ secrets.KV_NAMESPACE_ID }} "mac-release-version" ${{ needs.fetch-mac-versions.outputs.release_version }}

      - name: Retry Release version deployment (2nd attempt)
        uses: cloudflare/wrangler-action@v3
        id: retry-release-2
        if: steps.retry-release-1.outcome == 'failure'
        with:
          apiToken: ${{ secrets.CF_API_KV_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          command: kv:key put --namespace-id=${{ secrets.KV_NAMESPACE_ID }} "mac-release-version" ${{ needs.fetch-mac-versions.outputs.release_version }}

      - name: Log deployment status
        run: |
          echo "First attempt: ${{ steps.deploy-release.outcome }}"
          if [ "${{ steps.retry-release-1.outcome }}" != "" ]; then
            echo "Second attempt: ${{ steps.retry-release-1.outcome }}"
          fi
          if [ "${{ steps.retry-release-2.outcome }}" != "" ]; then
            echo "Third attempt: ${{ steps.retry-release-2.outcome }}"
          fi

  deploy-beta-version:
    needs: fetch-mac-versions
    runs-on: ubuntu-latest
    steps:
      - name: Deploy Beta Version to Cloudflare KV with retry
        uses: cloudflare/wrangler-action@v3
        id: deploy-beta
        continue-on-error: true
        with:
          apiToken: ${{ secrets.CF_API_KV_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          command: kv:key put --namespace-id=${{ secrets.KV_NAMESPACE_ID }} "mac-beta-version" ${{ needs.fetch-mac-versions.outputs.beta_version }}

      - name: Retry Beta version deployment (1st attempt)
        uses: cloudflare/wrangler-action@v3
        id: retry-beta-1
        if: steps.deploy-beta.outcome == 'failure'
        continue-on-error: true
        with:
          apiToken: ${{ secrets.CF_API_KV_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          command: kv:key put --namespace-id=${{ secrets.KV_NAMESPACE_ID }} "mac-beta-version" ${{ needs.fetch-mac-versions.outputs.beta_version }}

      - name: Retry Beta version deployment (2nd attempt)
        uses: cloudflare/wrangler-action@v3
        id: retry-beta-2
        if: steps.retry-beta-1.outcome == 'failure'
        with:
          apiToken: ${{ secrets.CF_API_KV_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          command: kv:key put --namespace-id=${{ secrets.KV_NAMESPACE_ID }} "mac-beta-version" ${{ needs.fetch-mac-versions.outputs.beta_version }}

      - name: Log deployment status
        run: |
          echo "First attempt: ${{ steps.deploy-beta.outcome }}"
          if [ "${{ steps.retry-beta-1.outcome }}" != "" ]; then
            echo "Second attempt: ${{ steps.retry-beta-1.outcome }}"
          fi
          if [ "${{ steps.retry-beta-2.outcome }}" != "" ]; then
            echo "Third attempt: ${{ steps.retry-beta-2.outcome }}"
          fi
